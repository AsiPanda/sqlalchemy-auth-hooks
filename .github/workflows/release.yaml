name: Release

on: push

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Build package
        run: poetry build

      - name: Upload built package
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 1

      - name: Install coveo-pypi-cli
        run: pip install coveo-pypi-cli

      - name: Determine the version for this release from the build
        id: current
        run: |
          BUILD_VER="$(ls dist/sqlalchemy_auth_hooks-*.tar.gz)"
          echo "Path: $BUILD_VER"
          if [[ $BUILD_VER =~ (sqlalchemy_auth_hooks-)(.*) ]]; then
              echo "version=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
              echo "Version of build: ${BASH_REMATCH[2]}"
          else
              echo "No version found found"
          fi

      - name: Get latest published version
        id: published
        run: |
          PUB_VER="$(pypi current-version sqlalchemy-auth-hooks)"
          echo "version=$PUB_VER" >> $GITHUB_OUTPUT
          echo "Latest published version: $PUB_VER"

      - name: Publish to pypi if new version
        if: (steps.current.outputs.version != steps.published.outputs.version)
        shell: bash
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          if [[ '${{ github.ref_name }}' == 'master' ]]; then
            poetry publish 
          else
            echo "Dry run of publishing the package"
            poetry publish --dry-run
          fi
      - name: Tag repository
        shell: bash
        id: get-next-tag
        if: (steps.current.outputs.version != steps.published.outputs.version)
        run: |
          TAG_NAME=${{ steps.current.outputs.version }}
          echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "This release will be tagged as $TAG_NAME"
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git tag --annotate --message="Automated tagging system" $TAG_NAME ${{ github.sha }}
      - name: Push the tag
        if: (steps.current.outputs.version != steps.published.outputs.version)
        env:
          TAG_NAME: ${{ steps.current.outputs.version }}
        run: |
          if [[ ${{ github.ref_name }} == 'master' ]]; then
            git push origin $TAG_NAME
          else
            echo "If this was the master branch, I would push a new tag named $TAG_NAME"
          fi