"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Callable, List, Optional

@dataclass(frozen=True)
class PolarSource:
    src: str
    filename: Optional[str] = ...


def read_c_str(c_str) -> str:
    """Copy a C string to a Python string and
    free the memory"""
    ...

class Polar:
    enrich_message: Callable
    def __init__(self) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def new_id(self):
        """Request a unique ID from the canonical external ID tracker."""
        ...
    
    def build_filter_plan(self, types, partial_results, variable, class_tag): # -> Any:
        """Get a filterplan for data filtering."""
        ...
    
    def build_data_filter(self, types, partial_results, variable, class_tag): # -> Any:
        """Get a filterplan for data filtering."""
        ...
    
    def load(self, sources: List[PolarSource]): # -> None:
        """Load Polar policies."""
        ...
    
    def clear_rules(self): # -> None:
        """Clear all rules from the Polar KB"""
        ...
    
    def new_query_from_str(self, query_str): # -> Query:
        ...
    
    def new_query_from_term(self, query_term): # -> Query:
        ...
    
    def next_inline_query(self): # -> Query | None:
        ...
    
    def register_constant(self, value, name): # -> None:
        ...
    
    def register_mro(self, name, mro): # -> None:
        ...
    
    def next_message(self):
        ...
    
    def set_message_enricher(self, enrich_message): # -> None:
        ...
    
    def check_result(self, result):
        ...
    
    def process_messages(self): # -> None:
        ...
    


class Query:
    enrich_message: Callable
    def __init__(self, ptr) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def call_result(self, call_id, value): # -> None:
        """Make an external call and propagate FFI errors."""
        ...
    
    def question_result(self, call_id, answer): # -> None:
        ...
    
    def application_error(self, message): # -> None:
        """Pass an error back to polar to get stack trace and other info."""
        ...
    
    def next_event(self) -> str:
        ...
    
    def debug_command(self, command): # -> None:
        ...
    
    def next_message(self):
        ...
    
    def source(self): # -> str:
        ...
    
    def bind(self, name, value): # -> None:
        ...
    
    def set_message_enricher(self, enrich_message): # -> None:
        ...
    
    def check_result(self, result):
        ...
    
    def process_messages(self): # -> None:
        ...
    


def check_result(result, enrich_message=...):
    """
    Unwrap the result by (a) extracting the pointers for
    result and error, (b) freeing the result pointers, and then
    (c) either returning the result pointer, or constructing and
    raising the error.
    """
    ...

def is_null(result):
    ...

def to_c_str(string):
    ...

def ffi_serialize(value):
    ...

def process_messages(next_message_method): # -> Generator[Any | str, None, None]:
    ...

