"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import List, Optional, Union, Any, Generator, Dict

from typings.polar import Relation
from typings.polar.ffi import Polar as FfiPolar
from typings.polar.host import Host

"""Communicate with the Polar virtual machine: load rules, make queries, etc."""

class Polar:
    """Polar API"""

    def __init__(self) -> None:
        self.ffi_polar: FfiPolar = ...
        self.host: Host = ...
    def __del__(self) -> None: ...
    def load_files(self, filenames: Optional[List[Union[Path, str]]] = ...) -> None:
        """Load Polar policy from ".polar" files."""
        ...
    def load_file(self, filename: Union[Path, str]) -> None:
        """Load Polar policy from a ".polar" file.

        `Oso.load_file` has been deprecated in favor of `Oso.load_files` as of
        the 0.20 release. Please see changelog for migration instructions:
        https://docs.osohq.com/project/changelogs/2021-09-15.html
        """
        ...
    def load_str(self, string: str) -> None:
        """Load a Polar string, checking that all inline queries succeed."""
        ...
    def check_inline_queries(self) -> None: ...
    def clear_rules(self) -> None: ...
    def query(self, query, *, bindings=..., accept_expression=...):  # -> Generator[Dict[str, Any], None, None]:
        """Query for a predicate, parsing it if necessary.

        :param query: The predicate to query for.

        :return: The result of the query.
        """
        ...
    def query_rule(self, name: str, *args: object, **kwargs: object) -> Generator[Dict[str, Any], None, None]:
        """Query for rule with name ``name`` and arguments ``args``.

        :param name: The name of the predicate to query.
        :param args: Arguments for the predicate.

        :return: The result of the query.
        """
        ...
    def query_rule_once(self, name, *args, **kwargs):  # -> bool:
        """Check a rule with name ``name`` and arguments ``args``.

        :param name: The name of the predicate to query.
        :param args: Arguments for the predicate.

        :return: True if the query has any results, False otherwise.
        """
        ...
    def repl(self, files=...):  # -> None:
        """Start an interactive REPL session."""
        ...
    def register_class(
        self, cls: type[Any], *, name: str | None = ..., fields: dict[str, type[Any] | Relation] | None = ...
    ) -> None:
        """
        Register `cls` as a class accessible by Polar.

        :param name:
            Optionally specify the name for the class inside of Polar. Defaults
            to `cls.__name__`
        :param fields:
            Optional dict mapping field names to types or Relation objects for
            data filtering.
        """
        ...
    def register_constant(self, value, name):  # -> None:
        """
        Register `value` as a Polar constant variable called `name`.

        :param value:
            The value to register as a constant.
        :param name:
            The name under which the constant will be visible in Polar.
        """
        ...
    def get_class(self, name: str | type[Any]) -> type[Any]:
        """Return class registered for ``name``.

        :raises UnregisteredClassError: If the class is not registered.
        """
        ...
    def partial_query(self, actor, action, resource_cls): ...
    def is_new_data_filtering_configured(self) -> bool: ...
    def new_authorized_query(self, actor, action, resource_cls): ...
